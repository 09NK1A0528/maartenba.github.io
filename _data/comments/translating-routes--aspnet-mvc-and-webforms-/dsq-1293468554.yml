id: dsq-1293468554
date: 2014-03-20T17:57:51.0000000+01:00
name: strandedpirate
avatar: https://disqus.com/api/users/avatars/strandedpirate.jpg
message: <p>The RenderAction exception <strong>"The controller for path '/'<br>was not found or does not implement IController."</strong>  only occurs when the language is changed to the non-default. After debugging with <a href="http://Reflector.net" rel="nofollow noopener" title="Reflector.net">Reflector.net</a> this appears to be because<br>the internal <em>System.Web.Mvc.Html.ChildActionExtensions.ActionHelper()</em> method<br>winds up calling our custom route’s <em>GetVirtualPath()</em> method. In that method we<br>are converting from the default language (en-US) to whatever language the user<br>has chosen (the destination language). Once <em>GetVirtualPath()</em>  is called the route values have been modified, by us, and the <em>ActionHelper()</em> explodes at the last line because it’s looking for a controller like <em>ThuisController</em> which doesn't exist. It should be looking for <em>HomeController</em>. The problem is that <em>ActionHelper()</em> never calls into our custom route’s <em>GetRouteData()</em> method to get the destination language translated back to the default language, it just skips this step, and this is why it throws the exception, because it’s using a translated value and looking for a controller that doesn’t exist.</p><p>I've temporarily worked around this by implementing a convention of sending an additional route value with all my <em>RenderAction()</em> calls like so:</p><p></p><pre><code>@{Html.RenderAction("_TestPartialAction", new { IsRenderAction = true });}</code></pre><p></p><p>And then in the <em>GetVirtualPath()</em> method I just check for the existence of that route value and if it exists I skip the default language to destination language translation:</p><p></p><pre><code><br>public override VirtualPathData<br>GetVirtualPath(RequestContext requestContext, RouteValueDictionary values)<br>{<br>    if (values.Keys.Contains("IsRenderAction") == false)<br>    {<br>        // translate from default language to destination language<br>    }<br>    return base.GetVirtualPath(requestContext, values);<br>}<br></code></pre><p></p><p>If there is an automatic way to determine that the <em>RenderAction()</em> method has been called while we are inside <em>GetVirtualPath()</em> please post the code. Otherwise this works nicely as a workaround in the meantime.</p>
