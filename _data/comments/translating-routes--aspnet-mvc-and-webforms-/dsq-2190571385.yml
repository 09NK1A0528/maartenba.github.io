id: dsq-2190571385
replyToId: dsq-2190554441
date: 2015-08-13T15:11:53.0000000+02:00
name: Maarten Balliauw
avatar: https://disqus.com/api/users/avatars/maartenballiauw.jpg
message: "<p>Depending on the languages being used, you could register the routes to your ProductsController as follows. I'm assuming \"List\" and \"Details\" are two actions on that controller. The controller from my assumption:</p><p>public class ProductsController : Controller {<br>    public ActionResult List() { ... }</p><p>    public ActionResult Details(int productId, string productName) {<br>       // ... get product here, by id ...<br>    }<br>}</p><p>Hooking up the translated routes. Assuming /products/list and /products/details/{productId}/{productName} for en-US, /produits/tous and /produits/afficher/{productId}/{productName} for fr-FR).</p><p>CultureInfo cultureEN = CultureInfo.GetCultureInfo(\"en-US\");<br>CultureInfo cultureFR = CultureInfo.GetCultureInfo(\"fr-FR\");</p><p>DictionaryRouteValueTranslationProvider translationProvider = new DictionaryRouteValueTranslationProvider( <br>        new List&lt;routevaluetranslation&gt; { <br>            // you'd need this for all controllers and action names being used<br>            new RouteValueTranslation(cultureEN, \"Home\", \"Home\"), <br>            new RouteValueTranslation(cultureEN, \"About\", \"About\"),<br>            new RouteValueTranslation(cultureEN, \"Products\", \"Products\"), <br>            new RouteValueTranslation(cultureEN, \"List\", \"List\"),<br>            new RouteValueTranslation(cultureEN, \"Details\", \"Details\"),<br>            new RouteValueTranslation(cultureFR, \"Home\", \"Demarrer\"), <br>            new RouteValueTranslation(cultureFR, \"About\", \"Infos\"),<br>            new RouteValueTranslation(cultureEN, \"Products\", \"Produits\"), <br>            new RouteValueTranslation(cultureEN, \"List\", \"Tous\"),<br>            new RouteValueTranslation(cultureEN, \"Details\", \"Afficher\")<br>        } <br>    );</p><p>routes.IgnoreRoute(\"{resource}.axd/{*pathInfo}\");</p><p>routes.MapTranslatedRoute( <br>        \"TranslatedRoute\", <br>        \"{controller}/{action}/{id}\", <br>        new { controller = \"Products\", action = \"List\", id = \"\" }, <br>        new { controller = translationProvider, action = translationProvider }, <br>        true <br>    );</p><p>routes.MapTranslatedRoute( <br>        \"TranslatedRoute\", <br>        \"{controller}/{action}/{id}\", <br>        new { controller = \"Products\", action = \"Details\", productId = 0, productName = \"\" }, <br>        new { controller = translationProvider, action = translationProvider }, <br>        true <br>    );</p><p>routes.MapRoute( <br>        \"Default\",      // Route name <br>        \"{controller}/{action}/{id}\",   // URL with parameters <br>        new { controller = \"Home\", action = \"Index\", id = \"\" }  // Parameter defaults <br>    );</p><p>That should map the URLs. For generating links, you can then create them in your views so they look like this:</p><p>/products/details/1234/good-book<br>/produits/afficher/1234/bien-livre</p><p>Or using MVC Helpers: (where you'd have to insert the link caption and product name translations on the fly, based on your view model for example):</p><p>@Html.ActionLink(\"Details for Good Book\", \"Details\", \"Products\", new { productId = 1234, productName = \"good-book\" })<br>@Html.ActionLink(\"Afficher Bien Livre\", \"Details\", \"Products\", new { productId = 1234, productName = \"bien-livre\" })</p>"
