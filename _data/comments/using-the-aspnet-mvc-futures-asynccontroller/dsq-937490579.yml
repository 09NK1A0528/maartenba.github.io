id: dsq-937490579
date: 2009-09-29T20:45:45.0000000+02:00
name: Shane Sievers
avatar: https://disqus.com/api/users/avatars/Shane Sievers.jpg
message: "<p>@maartenba, Thanks for this article.  It does seem a bit light on explanation but I appreciate it just the same.  In my project, I'm working on a situation where a user uploads a document of search queries.  For each search query I will be compiling thousands or hundreds of thousands of records and then saving them to a file.  I have all my methods written for doing this, but I'm a bit unclear as to how I can wire this up to your examples.</p><p>For Instance, my initial form is on the Index view.  When a user adds a file and clicks 'Search', the form posts back to my Index (POST) action to be evaluated.  If the form contained a file, I need to launch my Async code - how do you call that from here?  If you would, please consider the following:</p><p> [AcceptVerbs(HttpVerbs.Get)]<br> public ActionResult Index()<br>  {<br>            var viewModel = new MySearchViewModel();<br>            return View(viewModel);<br>  }</p><p>  [AcceptVerbs(HttpVerbs.Post)]<br>  public ActionResult Index(MySearchViewModel viewModel)<br>  {<br>      if (!ModelState.IsValid)<br>           return View(viewModel);</p><p>       #region File Upload<br>       if (viewModel.SearchByFile != null &amp;&amp; viewModel.SearchByFile.ContentLength &gt; 0) // Process File upload searches<br>        {<br>          AsyncManager.OutstandingOperations.Increment();<br>                ThreadPool.QueueUserWorkItem(o =&gt;<br>                {<br>                    ProcessFileUpload(); // ... --- THIS is the code that I want to run asynchronously ---//<br>                    AsyncManager.OutstandingOperations.Decrement();<br>                }, null);<br>        }<br>}</p><p>public ActionResult IndexCompleted()<br> {<br>        // Return the view<br>       var viewModel = new MySearchViewModel();<br>       viewModel.ProcessingMessage = \"Just finished working on your file!\";<br>       return View(viewModel);<br> }</p><p>Now when I visit my Index view, the ProcessingMessage equals \"Just finished working on your file\".  Thats odd, why did it hit the IndexCompleted already?  Also, my code in the ProcessFileUpload method fails because I believe it no longer has the repository in session.  Any ideas on if this pattern will work for what I'm trying to do or if I should implement a different solution?</p><p>Thanks in advance.</p>"
