id: dsq-3519066772
date: 2017-09-15T19:21:50.0000000+02:00
name: Constantinos L.
avatar: https://disqus.com/api/users/avatars/constantinosl.jpg
message: "<p>Hi Maarten, <br>I am trying out your sample in a realworld scenario where I needed a DbContext \"scoped\" instance inside the executing task Execute method. In the sample this cannot be done so I changed it a little to resemble the way middleware \"'Invoke\" methods are invoked using method parameter injection and the IServiceScopeFactory. <br>Here are my changes <br>1. In IScheduledTask.cs I removed the execute method<br>```csharp<br>public interface IScheduledTask<br>{<br>   string Schedule { get; }<br>} <br>```<br>2. In SchedulerHostedService.cs I inject the IServiceScopeFactory in the constructor. Then I wrap the call to \"ExecuteOneceAsync\" with a scope like so:<br>```csharp<br>protected override async Task ExecuteAsync(CancellationToken cancellationToken)<br>{<br>   while (!cancellationToken.IsCancellationRequested)<br>   {<br>      using (var scope = _serviceScopeFactory.CreateScope()) <br>      { <br>         await ExecuteOnceAsync(scope, cancellationToken);<br>      }</p><p>      await Task.Delay(TimeSpan.FromMinutes(1), cancellationToken);<br>   }<br>} <br>```<br>last but not least inside the ExecuteOnceAsync I change the way I invoike the method of each task<br>```csharp<br>var type = taskThatShouldRun.Task.GetType();<br>var method = typt.GetMethod(\"Invoke\", BindingFlags.Instance | BindingFlags.Public);<br>var arguments = method.GetParameters().Select(a =&gt; a.ParameterType == typeof(CancellationToken) ? cancellationToken : scope.ServiceProvider.GetService(a.ParameterType)).ToArray();<br>//invoke.<br>if (typeof(Task).Equals(method.ReturnType)) <br>{ <br>   await (Task)method.Invoke(taskThatShouldRun.Task, arguments);<br>} <br>else <br>{<br>   method.Invoke(taskThatShouldRun.Task, arguments);<br>}<br>```<br>After that this will work like a charm.<br>```csharp<br>public class SomeOtherTask : IScheduledTask<br>{<br>     public string Schedule =&gt; \"0 5 * * *\";<br>     public async Task Invoke(MyDbContext dbContext, CancellationToken cancellationToken)<br>     {<br>           await Task.Delay(5000, cancellationToken);<br>     }<br>}<br>```</p>"
