id: dsq-937490351
date: 2009-11-27T05:04:21.0000000+01:00
name: Thomas Eyde
avatar: https://disqus.com/api/users/avatars/Thomas Eyde.jpg
message: '<p>Inspired by your approach, I decided to take it a little further to satisfy my needs. And I have to tell you, this is way more elegant than my initial approach.</p><p>Now I can write actions in the following manner:</p><p>        [HttpPost]<br>        [MultiButton(Name = "delete", Argument = "id")]<br>        public ActionResult Delete(string id)<br>        {<br>            var response = System.Web.HttpContext.Current.Response;<br>            response.Write("Delete action was invoked with " + id);<br>            return View();<br>        }</p><p>The button can be any of:</p><p>        &lt;input type="submit" value="not important" name="delete" /&gt;<br>        &lt;input type="submit" value="not important" name="delete[b]:id[/b]" /&gt;</p><p>And your modified attribute is as follows:</p><p>    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = true)]<br>    public class MultiButtonAttribute : ActionNameSelectorAttribute<br>    {<br>        public string Name { get; set; }<br>        public string Argument { get; set; }</p><p>        public override bool IsValidName(ControllerContext controllerContext, string actionName, MethodInfo methodInfo)<br>        {<br>            var key = ButtonKeyFrom(controllerContext);<br>            var keyIsValid = IsValid(key);</p><p>            if (keyIsValid)<br>            {<br>                UpdateValueProviderIn(controllerContext, ValueFrom(key));<br>            }</p><p>            return keyIsValid;<br>        }</p><p>        private string ButtonKeyFrom(ControllerContext controllerContext)<br>        {<br>            var keys = controllerContext.HttpContext.Request.Params.AllKeys;<br>            return keys.FirstOrDefault(KeyStartsWithButtonName);<br>        }</p><p>        private static bool IsValid(string key)<br>        {<br>            return key != null;<br>        }</p><p>        private static string ValueFrom(string key)<br>        {<br>            var parts = key.Split(":".ToCharArray());<br>            return parts.Length &lt; 2 ? null : parts[1];<br>        }</p><p>        private void UpdateValueProviderIn(ControllerContext controllerContext, string value)<br>        {<br>            if (string.IsNullOrEmpty(Argument)) return;<br>            controllerContext.Controller.ValueProvider[Argument] = new ValueProviderResult(value, value, null);<br>        }</p><p>        private bool KeyStartsWithButtonName(string key)<br>        {<br>            return key.StartsWith(Name, StringComparison.InvariantCultureIgnoreCase);<br>        }<br>    }</p>'
