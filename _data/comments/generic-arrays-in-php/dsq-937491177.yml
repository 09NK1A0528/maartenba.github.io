id: dsq-937491177
date: 2008-11-23T19:06:53.0000000+01:00
name: hangy
avatar: https://disqus.com/api/users/avatars/hangy.jpg
message: <p>Maarten, Interesting approach! Generic lists and list interfaces which could be used to assure type safety for an API are something badly missing in PHP at the moment. Using PHP's dynamic (and powerful) arrays can be really nice, but if you need some type safety because you implement a plugin system or something like that, I find it hard to trust people not to screw up by providing invalid data.</p><p>[quote]I'd like to know what tool you had used to make those beautiful UML diagrams. [/quote]<br>The diagrams which Visual Studio creates are quite cool and also easy to understand, but, technically speaking, they are no UML class diagrams.</p><p>[quote]If one changes the validation strategy during runtime, your array becomes invalid. So I recommend to place (and use!) the strategy in the generic base class and force the user of GenricObjectArray to implement the strategy.[/quote]<br>You are absolutely right by saying that setting the array to an invalid state after elements have successfully been added is a bad idea. Also, your idea of forcing a this to be subclassed to provide an isValid strategy is good, but that would mean that the class is not generic any more.<br>In order to achieve a generic type safe array and avoiding the issue you pointed out, one could simply remove the setValidationFunction and just allow setting that function in the GenericArrayObject's constructor. That way, you would still have a generic (ie. no need to subclass it for a different type, just use a lambda function to validate the content) array and assure that the content is valid at all time. :)</p>
