id: dsq-937490832
date: 2008-09-02T16:37:25.0000000+02:00
name: Simone Chiaretta
avatar: https://disqus.com/api/users/avatars/codeclimber.jpg
message: "<p>I don't like Timothy's approach:<br>I think that using the ModelBinder to get the id of the object, retrieve the object from the DB and then return it as action parameter is not what the ModelBinder was developed for.</p><p>Maybe it's just a personal feeling, but I think it's a bad idea because one of the key concept of having such an MVC framework is to have separation of concerns, and IMHO the ModelBinding should only be focused on binding the form values to action parameters.</p><p>Maybe in a simple view that shows only the details of a product this might seem a good fit, but what if the view must show more complex data? Like the list of all the products that have an color option in Red? Would you get red from the form value return, do the search in the ModelBinder and send the list of products as action parameter?  And what if your action should operate on a more than one model object? or if the data retrieval is conditional to some other logic? Will you put that logic in the ModelBinder?<br>Will you have two approach to the same data retrieval problem based on the complexity of the action?</p><p>Furthermore, in this approach I also see a threat to testability: how do you inject the mock repository inside the ModelBinder? It's instantiated directly by the framework, you have no control on how it is instantiated. Maybe during testing you can test it as unit, but how in the production code? How to you inject the dependency on the real repository since you are not the one that is instantiating it?</p><p>I know you didn't write that blog post, but Timothy's blog requires a user registration to write a comment, and I'm not willing to do so.</p>"
