id: dsq-937490304
date: 2010-05-18T23:40:06.0000000+02:00
name: Ralph Schindler
avatar: https://disqus.com/api/users/avatars/Ralph Schindler.jpg
message: <p>Just a few words of caution about the above post.</p><p>From a technical standpoint, this is not very performant for a number of reasons. First, __call() itself is not very fast- none of the magic methods are. It is always faster to call a method who's signature is defined by a class already. Second, Reflection is even less performant.  Reflection should be used in development time code and if it must, in very low trafficed production code.  Even then, if you are using Reflection, the conclusions of the reflection should be cached somewhere as to not incure the cost of reflection more than a single request in a production environment.  Third, after the __call slowdown, and the reflection slowdown, this code is iterating every known class for all its known methods.  In some cases, this loop might iterate over 1000's of items.. and if this technique is used heavily in an application, this means that any dynamic calls (stuff proxied through __call()) would incure a loop that iterates at least a couple of 1000 times.</p><p>From a best practices standpoint- this attempts to bypass some of the fundamental coding best practices that C#, Java and PHP strive for in their implementation.  By this I mean polymorphic code via class based inheritance and interfaces. By leveraging "extends" and "implements" you are adhereing to a "Design by contact" methodology, which is generally accepted as a "good thing".  Languages such as python and ruby don't follow this implementation in their object model and opt for things like "monkey patching" and "duck typing" which, why interesting techniques, generally mean your API's are documentation driven, as opposed to code driven.  For example, these extension methods would never pop up in code completion in an IDE.</p><p>I guess I could make a few more comments, but I think that hits all the high notes. :)  In any case, it is an interesting bit of code!</p><p>Cheers,<br>Ralph</p>
